// --- DADOS DO JOGO ---
const ORIGINAL_VERDADES_HARD = [];
const ORIGINAL_CONSEQUENCIAS_HARD = [];
// (COLE SUAS PERGUNTAS E CONSEQU√äNCIAS AQUI)
ORIGINAL_VERDADES_HARD.push(
    "Das pessoas aqui, com quem voc√™ mais gostaria de ficar?", "Qual a maior mentira que j√° contou a um(a) ex e nunca foi descoberta?", "Qual foi a coisa mais embara√ßosa que seus pais j√° pegaram voc√™ fazendo?", "Qual foi a coisa mais cruel que j√° fez num relacionamento?", "Qual o lugar mais estranho onde j√° ficou com algu√©m?", "J√° mandou foto comprometedora pra pessoa errada?", "J√° teve sonho ‚Äúsugestivo‚Äù com algu√©m desta roda?", "Quando foi seu √∫ltimo fora amoroso e como lidou?", "O que voc√™ nunca toparia fazer pelo(a) parceiro(a)?", "Quem voc√™ gostaria muito de ficar de novo?", "J√° nadou pelado(a)? Onde?", "J√° teve que esconder marcas de beijo ou chup√£o?", "Tem tatuagem/piercing escondido? Onde?", "J√° ficou com algu√©m comprometido(a)?", "J√° terminou s√≥ pra se envolver com outra pessoa?", "J√° ficou com pai/m√£e de amigo(a)?", "Qual site do seu hist√≥rico te deixaria com vergonha se virem?", "J√° foi pego(a) ‚Äúno ato‚Äù? Por quem?", "Qual fetiche voc√™ tem vergonha de admitir?", "J√° fingiu prazer? Quando e por qu√™?", "Qual foi a maior loucura que j√° fez s√≥ pra impressionar algu√©m na cama?", "J√° teve um caso de uma noite s√≥?", "Qual √© a sua fantasia secreta que nunca contou a ningu√©m?", "J√° pensou em outra pessoa enquanto beijava/ficava?", "Qual √© o lugar mais audacioso onde transou?", "Qual a mensagem mais picante que j√° enviou?", "J√° fez nudez em p√∫blico ou correu pelado(a)?", "J√° sonhou com o(a) parceiro(a) de um amigo(a)?", "Qual foi o beijo mais inesquec√≠vel da sua vida?", "Que ‚Äúkink‚Äù voc√™ nunca toparia experimentar?", "J√° participou de m√©nage ou topa?", "Qual brinquedo er√≥tico voc√™ mais curte?", "J√° usou comida durante o sexo?", "J√° teve romance no trabalho?", "J√° mandou nudes em app de namoro?", "J√° flertou com professor(a) ou chefe?", "Qual √© seu ‚Äúguilty pleasure‚Äù sexual?", "J√° gravou v√≠deo √≠ntimo?", "Qual √© sua opini√£o sobre rela√ß√µes abertas?", "J√° fantasiou com um/uma famoso(a) espec√≠fico(a)? Qual?", "Qual a coisa mais estranha que j√° te excitou?", "Qual foi a pior experi√™ncia √≠ntima que j√° teve?", "Qual posi√ß√£o sexual voc√™ acha superestimada?", "Qual √© o maior tempo que ficou sem sexo?", "J√° pagou ou receberia dinheiro por sexo?", "J√° teve curiosidade sobre BDSM?", "Qual √© a parte do corpo que mais te atrai em algu√©m?", "J√° fez sexting hardcore? Com quem?", "Qual foi o ‚Äúwalk of shame‚Äù mais constrangedor?", "J√° usou algemas, vendas ou amarras?"
);
ORIGINAL_CONSEQUENCIAS_HARD.push(
    "Mande mensagem ousada ‚Äúsem querer‚Äù para um contato aleat√≥rio.", "Ligue para algu√©m e diga que est√° gr√°vido(a) / vai ser pai/m√£e.", "Fa√ßa striptease caprichado de 30 s.", "Lamba o pesco√ßo de quem o grupo apontar (se houver consentimento).", "Coloque um cubo de gelo dentro da blusa e espere derreter.", "Curta os 5 posts mais antigos do primeiro perfil que aparecer no seu feed.", "Fa√ßa dancinha viral do TikTok escolhida pelo grupo.", "Cheire as axilas da pessoa √† sua direita.", "Tire as meias com a boca.", "Fique 5 rodadas numa pose escolhida pelo grupo.", "Deixe a pessoa √† esquerda te desenhar o rosto inteiro com caneta.", "Envie um √°udio gemendo como se estivesse espregui√ßando para um amigo.", "Diga ‚Äúsim‚Äù para tudo at√© seu pr√≥ximo turno.", "Beije quem est√° √† sua esquerda (na bochecha ou boca‚Äî grupo decide).", "Poste nos stories ‚ÄúPensando em abrir um OnlyFans‚Ä¶ opini√µes?‚Äù e deixe 15 min.", "D√™ um beijo no pesco√ßo da pessoa que voc√™ escolher.", "Assista a um v√≠deo porn√¥ (fora da c√¢mera) e imite a primeira cena por 10 s.", "Lamba os mamilos do parceiro(a) ou da pr√≥pria m√£o simulando.", "Fa√ßa massagem sensual usando s√≥ uma m√£o por 1 min em algu√©m.", "Seduza algu√©m para tomar banho de roupa juntos (pode ser fic√ß√£o encenada).", "Permita que algu√©m fa√ßa uma foto sensual sua (sem nude expl√≠cito).", "Sussurre no ouvido do alvo a frase mais safada que imaginar.", "Tire a blusa ou camisa pelo resto da rodada.", "Posicione-se na ‚Äúpose mais sexy‚Äù por 1 min.", "Narrar uma p√°gina da Wikip√©dia no tom mais sensual poss√≠vel.", "Gemer como se tivesse o melhor orgasmo enquanto come algo.", "Desafiar-se a abrir bombom com a boca somente.", "Simular fazer amor com o ch√£o por 30 s.", "Mostrar a ‚Äúcara de orgasmo‚Äù", "Fazer body shot (beber l√≠quido no corpo de algu√©m) consensualmente.", "Beijar suas pr√≥prias m√£os como se fossem outra pessoa.", "Encenar a cena mais sexy de um filme que voc√™ lembrar.", "Colocar no status do WhatsApp para ‚ÄúEstou gozando‚Ä¶‚Äù depois ‚ÄúAcabei de gozar‚Äù.", "Fazer twerk por 1 min; se n√£o souber, aprender na hora.", "Colocar chantilly em parte do corpo e deixar algu√©m lamber (se toparem).", "Desenhar o corpo nu de algu√©m (ou descri√ß√£o verbal se preferirem).", "Fazer massagem nas costas de algu√©m sem usar as m√£os.", "Simular sexo oral em uma fruta por 15 s.", "Fazer lap dance completo de 30 s na pessoa a sua esquerda.", "Usar voz de beb√™ at√© o pr√≥ximo turno.", "Deixar um(a) amigo(a) postar qualquer frase no seu X."
);

let verdadesAtuais = [];
let consequenciasAtuais = [];

// --- VARI√ÅVEIS GLOBAIS DO JOGO ---
let players = [];
let currentPlayer;
let playerTurnOrder = [];
const PLAYER_EMOJIS = ["üçÜ", "üçë", "üí¶", "ü´¶", "ü•µ", "üî•", "üíã", "ü§§", "üå∂Ô∏è", "üîû", "üòà", "üçí", "üåù", "üç©", "üëÖ", "‚ôã", "‚úÇÔ∏è"];
let availableEmojis = [];
const MAX_PLAYERS = 10;
const MAX_DRINKS = 3;
const GIF_DURATION = 4000;

// --- ELEMENTOS DO DOM ---
const playerNameInput = document.getElementById('player-name-input');
const addPlayerBtn = document.getElementById('add-player-btn');
const playerListUI = document.getElementById('player-list');
const startGameBtn = document.getElementById('start-game-btn');
const resetQuestionsBtn = document.getElementById('reset-questions-btn'); // Bot√£o de reset
const setupArea = document.getElementById('setup-area');
//... (resto dos elementos do DOM como antes)
const loadingNextPlayerArea = document.getElementById('loading-next-player');
const gameArea = document.getElementById('game-area');
const gameOverArea = document.getElementById('game-over-area');
const currentPlayerDisplay = document.getElementById('current-player-display');
const choiceButtonsDiv = document.getElementById('choice-buttons');
const truthBtn = document.getElementById('truth-btn');
const dareBtn = document.getElementById('dare-btn');
const questionDareDisplayDiv = document.getElementById('question-dare-display');
const textDisplay = document.getElementById('text-display');
const doneBtn = document.getElementById('done-btn');
const drinkBtn = document.getElementById('drink-btn');
const playerStatusArea = document.getElementById('player-status-area');
const winnerDisplay = document.getElementById('winner-display');
const restartGameBtn = document.getElementById('restart-game-btn');
const clickSound = document.getElementById('click-sound');


// --- FUN√á√ïES DO JOGO ---
function playClickSound() {
    if (clickSound) {
        clickSound.currentTime = 0;
        clickSound.play().catch(error => console.log("Erro ao tocar som de clique:", error));
    }
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// ATUALIZADO: para usar o Local Storage
function loadQuestions() {
    // Carrega as perguntas j√° usadas do Local Storage
    const usedTruths = JSON.parse(localStorage.getItem('truthOrDare_usedTruths')) || [];
    const usedDares = JSON.parse(localStorage.getItem('truthOrDare_usedDares')) || [];

    // Filtra as perguntas originais para obter apenas as que n√£o foram usadas
    verdadesAtuais = ORIGINAL_VERDADES_HARD.filter(q => !usedTruths.includes(q));
    consequenciasAtuais = ORIGINAL_CONSEQUENCIAS_HARD.filter(q => !usedDares.includes(q));

    // Se todas as verdades j√° foram usadas, reseta o hist√≥rico de verdades e recarrega
    if (verdadesAtuais.length === 0 && ORIGINAL_VERDADES_HARD.length > 0) {
        alert("Todas as VERDADES foram usadas! O ciclo ser√° reiniciado.");
        localStorage.removeItem('truthOrDare_usedTruths');
        verdadesAtuais = [...ORIGINAL_VERDADES_HARD];
    }
    
    // Se todas as consequ√™ncias j√° foram usadas, reseta o hist√≥rico de consequ√™ncias e recarrega
    if (consequenciasAtuais.length === 0 && ORIGINAL_CONSEQUENCIAS_HARD.length > 0) {
        alert("Todas as CONSEQU√äNCIAS foram usadas! O ciclo ser√° reiniciado.");
        localStorage.removeItem('truthOrDare_usedDares');
        consequenciasAtuais = [...ORIGINAL_CONSEQUENCIAS_HARD];
    }
    
    // Embaralha as listas atuais
    shuffleArray(verdadesAtuais);
    shuffleArray(consequenciasAtuais);
}

function updatePlayerListUI() {
    playerListUI.innerHTML = '';
    players.forEach(player => {
        const li = document.createElement('li');
        li.innerHTML = `<span>${player.emoji} ${player.name}</span><button class="remove-player-btn" data-player-id="${player.id}">X</button>`;
        playerListUI.appendChild(li);
    });
    startGameBtn.disabled = players.length < 2;
    const maxReached = players.length >= MAX_PLAYERS;
    addPlayerBtn.disabled = maxReached;
    playerNameInput.disabled = maxReached;
    playerNameInput.placeholder = maxReached ? "M√°ximo de jogadores atingido" : "Nome do Jogador";
}

function addPlayer() {
    playClickSound();
    const name = playerNameInput.value.trim();
    if (name && players.length < MAX_PLAYERS) {
        const isDuplicate = players.some(player => player.name.toLowerCase() === name.toLowerCase());
        if (isDuplicate) {
            alert("Este nome j√° foi adicionado. Por favor, escolha outro.");
            return;
        }
        const emojiIndex = Math.floor(Math.random() * availableEmojis.length);
        const selectedEmoji = availableEmojis.splice(emojiIndex, 1)[0];
        players.push({ name, drinks: 0, eliminated: false, id: Date.now() + name, emoji: selectedEmoji });
        playerNameInput.value = '';
        updatePlayerListUI();
    } else if (players.length >= MAX_PLAYERS) {
        alert(`M√°ximo de ${MAX_PLAYERS} jogadores atingido.`);
    } else if (!name) {
        alert("Por favor, insira um nome para o jogador.");
    }
    playerNameInput.focus();
}

function removePlayer(playerIdToRemove) {
    playClickSound();
    const playerIndex = players.findIndex(p => p.id == playerIdToRemove);
    if(playerIndex > -1){
        const removedPlayer = players[playerIndex];
        if (removedPlayer.emoji) {
            availableEmojis.push(removedPlayer.emoji);
        }
        players.splice(playerIndex, 1);
        updatePlayerListUI();
    }
}

// ATUALIZADO: para salvar a pergunta usada
function showTruth() {
    playClickSound();
    if (verdadesAtuais.length === 0) {
        loadQuestions(); // Tenta recarregar (caso o ciclo tenha se completado)
        if(verdadesAtuais.length === 0) { // Se ainda estiver vazio
             textDisplay.textContent = "Nenhuma verdade dispon√≠vel no momento.";
             return;
        }
    }
    const truth = verdadesAtuais.shift();
    textDisplay.textContent = `VERDADE: ${truth}`;
    
    // Salva no Local Storage
    const usedTruths = JSON.parse(localStorage.getItem('truthOrDare_usedTruths')) || [];
    usedTruths.push(truth);
    localStorage.setItem('truthOrDare_usedTruths', JSON.stringify(usedTruths));
    
    choiceButtonsDiv.style.display = 'none';
    questionDareDisplayDiv.style.display = 'block';
}

// ATUALIZADO: para salvar a consequ√™ncia usada
function showDare() {
    playClickSound();
    if (consequenciasAtuais.length === 0) {
        loadQuestions();
        if(consequenciasAtuais.length === 0) {
            textDisplay.textContent = "Nenhuma consequ√™ncia dispon√≠vel no momento.";
            return;
        }
    }
    const dare = consequenciasAtuais.shift();
    textDisplay.textContent = `CONSEQU√äNCIA: ${dare}`;

    // Salva no Local Storage
    const usedDares = JSON.parse(localStorage.getItem('truthOrDare_usedDares')) || [];
    usedDares.push(dare);
    localStorage.setItem('truthOrDare_usedDares', JSON.stringify(usedDares));
    
    choiceButtonsDiv.style.display = 'none';
    questionDareDisplayDiv.style.display = 'block';
}


function resetGame() {
    playClickSound();
    players = [];
    currentPlayer = null;
    playerTurnOrder = [];
    availableEmojis = [...PLAYER_EMOJIS];
    // A fun√ß√£o loadQuestions agora vai lidar com o Local Storage, n√£o precisa resetar aqui
    updatePlayerListUI();
    playerStatusArea.innerHTML = '';
    setupArea.style.display = 'block';
    gameArea.style.display = 'none';
    gameOverArea.style.display = 'none';
    loadingNextPlayerArea.style.display = 'none';
}


// --- EVENT LISTENERS ---
// ... (todos os outros event listeners permanecem os mesmos)
addPlayerBtn.addEventListener('click', addPlayer);
playerNameInput.addEventListener('keypress', (e) => { if (e.key === 'Enter' && !addPlayerBtn.disabled) addPlayer(); });
playerListUI.addEventListener('click', (e) => { if (e.target.classList.contains('remove-player-btn')) removePlayer(e.target.dataset.playerId); });
startGameBtn.addEventListener('click', startGame);
truthBtn.addEventListener('click', showTruth);
dareBtn.addEventListener('click', showDare);
doneBtn.addEventListener('click', handleDone);
drinkBtn.addEventListener('click', handleDrink);
restartGameBtn.addEventListener('click', resetGame);


// NOVO Event Listener para o bot√£o de resetar perguntas
resetQuestionsBtn.addEventListener('click', () => {
    playClickSound();
    if (confirm("Voc√™ tem certeza que deseja apagar o hist√≥rico de perguntas j√° usadas?")) {
        localStorage.removeItem('truthOrDare_usedTruths');
        localStorage.removeItem('truthOrDare_usedDares');
        alert("Hist√≥rico de perguntas apagado com sucesso!");
    }
});

// --- INICIALIZA√á√ÉO ---
resetGame(); // A chamada inicial do jogo

// --- FUN√á√ïES N√ÉO MODIFICADAS (COPIADAS PARA COMPLETUDE) ---
function updatePlayerStatusDisplay(){playerStatusArea.innerHTML="";players.forEach(e=>{const t=document.createElement("div");t.textContent=`${e.emoji} ${e.name}: ${e.drinks} bebida(s)${e.eliminated?" - ELIMINADO(A)!":""}`,e.eliminated&&t.classList.add("eliminated"),playerStatusArea.appendChild(t)})}
function selectNextPlayer(){const e=players.filter(e=>!e.eliminated);return 0===e.length?(endGame("Ningu√©m sobrou! Empate ou todos desistiram."),null):1===e.length&&players.length>1?(endGame(`${e[0].emoji} ${e[0].name} √© o(a) vencedor(a)!`),null):0===playerTurnOrder.length&&(e.length>0?playerTurnOrder=shuffleArray([...e]):(endGame("Erro: N√£o h√° jogadores ativos para formar uma rodada."),null)),playerTurnOrder.length>0?(currentPlayer=playerTurnOrder.shift(),currentPlayer):(endGame("N√£o foi poss√≠vel determinar o pr√≥ximo jogador."),null)}
function startGame(){playClickSound();if(players.length<2)return void alert("Adicione pelo menos 2 jogadores para come√ßar!");loadQuestions(),playerTurnOrder=[],setupArea.style.display="none",gameArea.style.display="none",loadingNextPlayerArea.style.display="block",gameOverArea.style.display="none",setTimeout(()=>{loadingNextPlayerArea.style.display="none",gameArea.style.display="block",nextTurnFlow()},GIF_DURATION)}
function nextTurnFlow(){if(selectNextPlayer()){currentPlayerDisplay.textContent=`Vez de: ${currentPlayer.emoji} ${currentPlayer.name}`,choiceButtonsDiv.style.display="block",questionDareDisplayDiv.style.display="none",updatePlayerStatusDisplay()}}
function prepareNextTurn(){questionDareDisplayDiv.style.display="none",choiceButtonsDiv.style.display="none",gameArea.style.display="none",loadingNextPlayerArea.style.display="block",setTimeout(()=>{loadingNextPlayerArea.style.display="none",gameArea.style.display="block",nextTurnFlow()},GIF_DURATION)}
function handleDone(){playClickSound(),prepareNextTurn()}
function handleDrink(){playClickSound();if(currentPlayer){const e=players.find(e=>e.id===currentPlayer.id);if(!e)return console.error("Erro: Jogador atual n√£o encontrado na lista principal."),void prepareNextTurn();e.drinks++,e.drinks>=MAX_DRINKS&&(e.eliminated=!0,alert(`${e.emoji} ${e.name} bebeu ${MAX_DRINKS} vezes e foi eliminado(a)!`)),updatePlayerStatusDisplay();const t=players.filter(e=>!e.eliminated);players.length>1&&t.length<=1?1===t.length?endGame(`${t[0].emoji} ${t[0].name} √© o(a) vencedor(a)!`):endGame("Todos foram eliminados!"):1===players.length&&e.eliminated?endGame(`${e.name} foi eliminado(a)! Fim de jogo.`):prepareNextTurn()}}
function endGame(e){gameArea.style.display="none",loadingNextPlayerArea.style.display="none",gameOverArea.style.display="block",winnerDisplay.textContent=e}
